###################################################################
# Persistent storage for Redis
###################################################################
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data-redis-0
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: standard
---
###################################################################
# Redis Database stateful container
###################################################################
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: redis
spec:
  selector:
    matchLabels:
      app: redis
  serviceName: "redis"
  replicas: 1 # by default is 1
  template:
    metadata:
      labels:
        app: redis
        tier: backend
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: redis
        image: redis
        ports:
        - containerPort: 6379
          name: redis
        volumeMounts:
        - name: redis-data
          mountPath: /data
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: manual
      resources:
        requests:
          storage: 20Gi
---
###################################################################
# Service that exposes Redis Database
###################################################################
apiVersion: v1
kind: Service
metadata:
  name: redis
  labels:
    app: redis
    tier: backend
spec:
  ports:
  - port: 6379
    targetPort: redis
    name: redis
  selector:
    app: redis
    tier: backend
---
###################################################################
# Redis User Interface stateless container deployment
###################################################################
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: redis-commander
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-commander
  template:
    metadata:
      labels:
        app: redis-commander
        tier: backend
    spec:
      containers:
      - name: redis-commander
        image: rediscommander/redis-commander
        env:
        - name: REDIS_HOSTS
          value: instance1:redis:6379
        ports:
        - name: redis-commander
          containerPort: 8081
---
###################################################################
# Service that exposes Redis UI
###################################################################
apiVersion: v1
kind: Service
metadata:
  name: redis-commander
  labels:
    app: redis-commander
    tier: backend
spec:
  ports:
  - port: 8081
    targetPort: redis-commander
    name: redis-commander
  type: NodePort
  selector:
    app: redis-commander
    tier: backend
---
###################################################################
# droneapiworker stateful container deployment
###################################################################
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: droneapiworker
spec:
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: droneapiworker
  serviceName: "droneapiworker"
  replicas: 1
  template:
    metadata:
      labels:
        app: droneapiworker
        tier: backend
    spec:
      terminationGracePeriodSeconds: 1
      containers:
      - name: droneapiworker
        image: lesterthomas/droneapiworker:3.0.9
        env:
        - name: DRONEAPI_URL
          value: http://droneapi.ddns.net
        - name: DOCKER_DRONESIM_IMAGE
          value: lesterthomas/dronesim:1.8
        ports:
        - containerPort: 1236
          name: droneapiworker
        livenessProbe:
          httpGet:
            path: /admin
            port: 1236

---
###################################################################
# Service that exposes droneapiworker
###################################################################
apiVersion: v1
kind: Service
metadata:
  name: droneapiworker
  labels:
    app: droneapiworker
    tier: backend
spec:
  ports:
  - port: 1236
    name: droneapiworker
  clusterIP: None
  selector:
    app: droneapiworker
    tier: backend
---
###################################################################
# droneapiserver stateless container deployment
###################################################################
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: droneapiserver
spec:
  replicas: 2
  selector:
    matchLabels:
      app: droneapiserver
  template:
    metadata:
      labels:
        app: droneapiserver
        tier: frontend
    spec:
      containers:
      - name: droneapiserver
        image: lesterthomas/droneapiserver:3.0.7
        env:
        - name: DRONEAPI_URL
          value: http://droneapi.ddns.net
        ports:
        - name: droneapiserver
          containerPort: 1234
---
###################################################################
# Service that exposes droneapiserver
###################################################################
apiVersion: v1
kind: Service
metadata:
  name: droneapiserver
  labels:
    app: droneapiserver
    tier: frontend
spec:
  ports:
  - port: 1234
    targetPort: droneapiserver
    name: droneapiserver
  type: NodePort
  selector:
    app: droneapiserver
    tier: frontend
---
###################################################################
# Ingress that exposes http traffic to outside world
###################################################################
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: droneapiserver
  annotations:
    ingress.kubernetes.io/ssl-redirect: "false"
    ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: droneapi.ddns.net
    http:
      paths:
      - path: /
        backend:
          serviceName: droneapiserver # This is the name of the service to be exposed.
          servicePort: 1234  # This is the port on which the service is exposed.
  - host: redis.ddns.net
    http:
      paths:
      - path: /
        backend:
          serviceName: redis-commander
          servicePort: 8081
