###################################################################
# Persistent storage for Redis
###################################################################
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data-redis-0
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: standard
---
###################################################################
# Redis Database and Sentinel pod (for high availability run additional script to launch redis and sentinel slaves). This pod boot-straps redis and sentinel
###################################################################
apiVersion: v1
kind: Pod
metadata:
  labels:
    name: redis
    redis-sentinel: "true"
    role: master
  name: redis-master
spec:
  containers:
    - name: master
      image: k8s.gcr.io/redis:v1
      env:
        - name: MASTER
          value: "true"
      ports:
        - containerPort: 6379
      resources:
        limits:
          cpu: "0.1"
      volumeMounts:
        - mountPath: /redis-master-data
          name: data
    - name: sentinel
      image: kubernetes/redis:v1
      env:
        - name: SENTINEL
          value: "true"
      ports:
        - containerPort: 26379
  volumes:
    - name: data
      emptyDir: {}
---
###################################################################
# Service that exposes Redis Sentinel (use sentinel to query the Redis master)
###################################################################
apiVersion: v1
kind: Service
metadata:
  labels:
    name: sentinel
    role: service
  name: redis-sentinel
spec:
  ports:
    - port: 26379
      targetPort: 26379
  selector:
    redis-sentinel: "true"
---
###################################################################
# Redis User Interface stateless container deployment
###################################################################
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: redis-commander
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-commander
  template:
    metadata:
      labels:
        app: redis-commander
        tier: backend
    spec:
      containers:
      - name: redis-commander
        image: rediscommander/redis-commander
        env:
        - name: REDIS_HOSTS
          value: instance1:redis:6379
        ports:
        - name: redis-commander
          containerPort: 8081
---
###################################################################
# Service that exposes Redis UI
###################################################################
apiVersion: v1
kind: Service
metadata:
  name: redis-commander
  labels:
    app: redis-commander
    tier: backend
spec:
  ports:
  - port: 8081
    targetPort: redis-commander
    name: redis-commander
  type: NodePort
  selector:
    app: redis-commander
    tier: backend
---
###################################################################
# droneapiworker stateful container deployment
###################################################################
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: droneapiworker
spec:
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: droneapiworker
  serviceName: "droneapiworker"
  replicas: 1
  template:
    metadata:
      labels:
        app: droneapiworker
        tier: backend
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In  
                values:
                - droneapiworker
            topologyKey: "kubernetes.io/hostname"    
      terminationGracePeriodSeconds: 1
      containers:
      - name: droneapiworker
        image: lesterthomas/droneapiworker:3.0.10
        env:
        - name: DRONEAPI_URL
          value: http://droneapi.ddns.net
        - name: DOCKER_DRONESIM_IMAGE
          value: lesterthomas/dronesim:1.8
        ports:
        - containerPort: 1236
          name: droneapiworker
        livenessProbe:
          httpGet:
            path: /admin
            port: 1236
---
###################################################################
# Service that exposes droneapiworker
###################################################################
apiVersion: v1
kind: Service
metadata:
  name: droneapiworker
  labels:
    app: droneapiworker
    tier: backend
spec:
  ports:
  - port: 1236
    name: droneapiworker
  clusterIP: None
  selector:
    app: droneapiworker
    tier: backend
---
###################################################################
# droneapiserver stateless container deployment
###################################################################
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: droneapiserver
spec:
  replicas: 2
  selector:
    matchLabels:
      app: droneapiserver
  template:
    metadata:
      labels:
        app: droneapiserver
        tier: frontend
    spec:
      containers:
      - name: droneapiserver
        image: lesterthomas/droneapiserver:3.0.8
        env:
        - name: DRONEAPI_URL
          value: http://droneapi.ddns.net
        ports:
        - name: droneapiserver
          containerPort: 1234
---
###################################################################
# Service that exposes droneapiserver
###################################################################
apiVersion: v1
kind: Service
metadata:
  name: droneapiserver
  labels:
    app: droneapiserver
    tier: frontend
spec:
  ports:
  - port: 1234
    targetPort: droneapiserver
    name: droneapiserver
  type: NodePort
  selector:
    app: droneapiserver
    tier: frontend
---
###################################################################
# Ingress that exposes http traffic to outside world
###################################################################
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: droneapiserver
  annotations:
    ingress.kubernetes.io/ssl-redirect: "false"
    ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: droneapi.ddns.net
    http:
      paths:
      - path: /*
        backend:
          serviceName: droneapiserver # This is the name of the service to be exposed.
          servicePort: 1234  # This is the port on which the service is exposed.
  - host: redis-db.ddns.net
    http:
      paths:
      - path: /*
        backend:
          serviceName: redis-commander
          servicePort: 8081
